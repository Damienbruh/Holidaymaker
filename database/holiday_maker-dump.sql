--
-- PostgreSQL database dump
--

-- Dumped from database version 16.4
-- Dumped by pg_dump version 16.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

ALTER TABLE IF EXISTS ONLY public.rooms DROP CONSTRAINT IF EXISTS rooms_hotels_hotel_id_fk;
ALTER TABLE IF EXISTS ONLY public.hotels_join_features DROP CONSTRAINT IF EXISTS hotels_join_features_hotels_hotel_id_fk;
ALTER TABLE IF EXISTS ONLY public.hotels_join_features DROP CONSTRAINT IF EXISTS hotels_join_features_hotel_features_hotel_features_id_fk;
ALTER TABLE IF EXISTS ONLY public.bookings_join_rooms DROP CONSTRAINT IF EXISTS bookings_join_rooms_rooms_room_id_fk;
ALTER TABLE IF EXISTS ONLY public.bookings_join_rooms DROP CONSTRAINT IF EXISTS bookings_join_rooms_bookings_bookings_id_fk;
ALTER TABLE IF EXISTS ONLY public.bookings_join_customer DROP CONSTRAINT IF EXISTS bookings_join_customer_customers_customer_id_fk;
ALTER TABLE IF EXISTS ONLY public.bookings_join_customer DROP CONSTRAINT IF EXISTS bookings_join_customer_bookings_bookings_id_fk;
ALTER TABLE IF EXISTS ONLY public.bookings_join_addons DROP CONSTRAINT IF EXISTS bookings_join_addons_bookings_bookings_id_fk;
ALTER TABLE IF EXISTS ONLY public.bookings_join_addons DROP CONSTRAINT IF EXISTS bookings_join_addons_addons_addons_id_fk;
ALTER TABLE IF EXISTS ONLY public.addons DROP CONSTRAINT IF EXISTS addons_hotels_hotel_id_fk;
ALTER TABLE IF EXISTS ONLY public.rooms DROP CONSTRAINT IF EXISTS rooms_pk;
ALTER TABLE IF EXISTS ONLY public.hotels DROP CONSTRAINT IF EXISTS hotels_pk;
ALTER TABLE IF EXISTS ONLY public.hotels_join_features DROP CONSTRAINT IF EXISTS hotels_join_features_pk;
ALTER TABLE IF EXISTS ONLY public.hotel_features DROP CONSTRAINT IF EXISTS hotel_features_pk;
ALTER TABLE IF EXISTS ONLY public.customers DROP CONSTRAINT IF EXISTS customers_pk;
ALTER TABLE IF EXISTS ONLY public.bookings DROP CONSTRAINT IF EXISTS bookings_pk;
ALTER TABLE IF EXISTS ONLY public.bookings_join_rooms DROP CONSTRAINT IF EXISTS bookings_join_rooms_pk;
ALTER TABLE IF EXISTS ONLY public.bookings_join_customer DROP CONSTRAINT IF EXISTS bookings_join_customer_pk;
ALTER TABLE IF EXISTS ONLY public.bookings_join_addons DROP CONSTRAINT IF EXISTS bookings_join_addons_pk;
ALTER TABLE IF EXISTS ONLY public.addons DROP CONSTRAINT IF EXISTS addons_pk;
DROP VIEW IF EXISTS public.feature_and_hotel_view;
DROP TABLE IF EXISTS public.hotels_join_features;
DROP TABLE IF EXISTS public.hotel_features;
DROP TABLE IF EXISTS public.customers;
DROP TABLE IF EXISTS public.bookings_join_customer;
DROP TABLE IF EXISTS public.bookings_join_addons;
DROP VIEW IF EXISTS public.booking_to_hotels_view;
DROP TABLE IF EXISTS public.rooms;
DROP TABLE IF EXISTS public.hotels;
DROP TABLE IF EXISTS public.bookings_join_rooms;
DROP TABLE IF EXISTS public.bookings;
DROP TABLE IF EXISTS public.admins;
DROP TABLE IF EXISTS public.addons;
drop view if exists public.booking_view;
DROP FUNCTION IF EXISTS public.verify_login(input_username text, input_password text);
-- *not* dropping schema, since initdb creates it
--
-- Name: public; Type: SCHEMA; Schema: -; Owner: postgres
--

-- *not* creating schema, since initdb creates it


ALTER SCHEMA public OWNER TO postgres;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS '';


--
-- Name: verify_login(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.verify_login(input_username text, input_password text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
begin
    return exists
        (select 1 from admins where admins.username = input_username and admins.password = input_password);
end
$$;


ALTER FUNCTION public.verify_login(input_username text, input_password text) OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: addons; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.addons (
    addons_id integer NOT NULL,
    addon text NOT NULL,
    price integer NOT NULL,
    hotel_fk integer NOT NULL
);


ALTER TABLE public.addons OWNER TO postgres;

--
-- Name: addons_addons_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.addons ALTER COLUMN addons_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.addons_addons_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: admins; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.admins (
    id integer NOT NULL,
    username text,
    password text
);


ALTER TABLE public.admins OWNER TO postgres;

--
-- Name: admins_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.admins ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.admins_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: bookings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.bookings (
    bookings_id integer NOT NULL,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    status text
);


ALTER TABLE public.bookings OWNER TO postgres;

--
-- Name: bookings_join_rooms; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.bookings_join_rooms (
    rooms_fk integer NOT NULL,
    booking_fk integer NOT NULL
);


ALTER TABLE public.bookings_join_rooms OWNER TO postgres;

--
-- Name: hotels; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.hotels (
    hotel_id integer NOT NULL,
    street_name text,
    postal_code text,
    city text,
    region text,
    country text,
    distance_to_ski_slope text,
    distance_to_town_center text,
    rating integer
);


ALTER TABLE public.hotels OWNER TO postgres;

--
-- Name: rooms; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.rooms (
    room_id integer NOT NULL,
    size text,
    price integer,
    hotel_fk integer,
    room_number integer
);


ALTER TABLE public.rooms OWNER TO postgres;

--
-- Name: booking_to_hotels_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.booking_to_hotels_view AS
 SELECT hotels.hotel_id,
    hotels.street_name,
    hotels.postal_code,
    hotels.city,
    hotels.region,
    hotels.country,
    hotels.distance_to_ski_slope,
    hotels.distance_to_town_center,
    hotels.rating,
    rooms.room_id,
    rooms.size,
    rooms.price,
    rooms.room_number,
    bookings.bookings_id,
    bookings.start_date,
    bookings.end_date,
    bookings.status
   FROM (((public.rooms
     LEFT JOIN public.hotels ON ((rooms.hotel_fk = hotels.hotel_id)))
     LEFT JOIN public.bookings_join_rooms ON ((rooms.room_id = bookings_join_rooms.rooms_fk)))
     LEFT JOIN public.bookings ON ((bookings_join_rooms.booking_fk = bookings.bookings_id)));


ALTER VIEW public.booking_to_hotels_view OWNER TO postgres;

--
-- Name: bookings_bookings_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.bookings ALTER COLUMN bookings_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.bookings_bookings_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: bookings_join_addons; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.bookings_join_addons (
    addon_fk integer NOT NULL,
    booking_fk integer NOT NULL
);


ALTER TABLE public.bookings_join_addons OWNER TO postgres;

--
-- Name: bookings_join_customer; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.bookings_join_customer (
    customer_fk integer NOT NULL,
    booking_fk integer NOT NULL
);


ALTER TABLE public.bookings_join_customer OWNER TO postgres;

--
-- Name: customers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.customers (
    customer_id integer NOT NULL,
    name text,
    email text,
    phone_number text,
    birthyear integer
);


ALTER TABLE public.customers OWNER TO postgres;

--
-- Name: COLUMN customers.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.customers.name IS 'name';


--
-- Name: customers_customer_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.customers ALTER COLUMN customer_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.customers_customer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: hotel_features; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.hotel_features (
    hotel_features_id integer NOT NULL,
    feature text NOT NULL
);


ALTER TABLE public.hotel_features OWNER TO postgres;

--
-- Name: COLUMN hotel_features.feature; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.hotel_features.feature IS 'feature';


--
-- Name: hotels_join_features; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.hotels_join_features (
    feature_fk integer NOT NULL,
    hotel_fk integer NOT NULL
);


ALTER TABLE public.hotels_join_features OWNER TO postgres;

--
-- Name: feature_and_hotel_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.feature_and_hotel_view AS
 SELECT hotels.hotel_id,
    hotels.street_name,
    hotels.postal_code,
    hotels.city,
    hotels.region,
    hotels.country,
    hotels.distance_to_ski_slope,
    hotels.distance_to_town_center,
    hotels.rating,
    hotel_features.hotel_features_id,
    hotel_features.feature
   FROM ((public.hotels
     JOIN public.hotels_join_features ON ((hotels.hotel_id = hotels_join_features.hotel_fk)))
     JOIN public.hotel_features ON ((hotels_join_features.feature_fk = hotel_features.hotel_features_id)));


ALTER VIEW public.feature_and_hotel_view OWNER TO postgres;

--
-- Name: hotel_features_hotel_features_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.hotel_features ALTER COLUMN hotel_features_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.hotel_features_hotel_features_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: hotels_address_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.hotels ALTER COLUMN hotel_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.hotels_address_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: rooms_room_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.rooms ALTER COLUMN room_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.rooms_room_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: addons; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.addons (addons_id, addon, price, hotel_fk) FROM stdin;
1	all inclusive	55	12
3	halvpension	36	2
4	helpension	33	7
\.


--
-- Data for Name: admins; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.admins (id, username, password) FROM stdin;
1	admin	password
2	david	assword
\.


--
-- Data for Name: bookings; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.bookings (bookings_id, start_date, end_date, status) FROM stdin;
1	2025-02-08 10:06:28	2025-02-05 11:59:43	pending
2	2024-12-24 05:46:17	2025-01-22 23:59:47	inactive
3	2025-02-24 04:15:09	2024-12-26 11:29:01	pending
4	2025-01-28 05:02:39	2025-02-09 16:10:04	pending
5	2024-12-12 04:16:16	2024-11-30 18:56:58	active
6	2024-12-10 12:40:51	2024-12-31 07:31:50	pending
7	2025-01-28 11:54:47	2024-11-03 23:19:30	active
8	2025-02-02 11:09:05	2024-11-13 11:24:10	inactive
9	2025-02-24 09:49:13	2024-12-12 15:22:04	active
10	2024-11-19 21:05:37	2025-01-10 12:08:36	active
11	2024-11-08 07:53:02	2024-12-25 08:57:38	active
12	2025-01-09 15:28:34	2024-12-09 14:48:13	active
13	2024-12-28 04:49:00	2024-11-06 08:32:26	inactive
14	2024-11-07 16:05:14	2025-02-21 05:07:46	active
15	2024-11-02 07:34:52	2025-02-23 23:22:29	inactive
16	2025-02-12 12:23:45	2025-01-25 01:48:25	active
17	2024-11-28 19:41:32	2024-12-24 08:07:07	active
18	2024-12-27 22:57:15	2025-02-13 22:44:27	inactive
19	2025-01-10 11:53:35	2024-11-11 14:49:18	active
20	2024-12-20 17:03:01	2025-02-19 00:53:40	active
21	2025-02-09 19:23:05	2024-11-21 04:19:27	active
22	2024-11-19 02:54:10	2024-12-17 12:47:55	pending
23	2024-12-28 02:56:52	2024-12-19 13:15:35	active
24	2024-12-05 23:46:25	2025-01-24 20:09:58	pending
25	2024-11-23 18:57:04	2024-12-03 22:08:09	pending
26	2024-11-22 01:12:35	2024-12-21 06:50:20	active
27	2025-01-24 05:52:34	2024-12-15 07:28:56	active
28	2025-01-11 00:46:54	2025-02-26 03:24:01	pending
29	2025-01-22 13:59:25	2024-11-04 18:17:41	pending
30	2024-12-08 15:08:47	2024-11-20 22:48:06	active
31	2025-01-25 06:34:27	2025-02-12 04:48:21	pending
32	2025-01-09 04:04:54	2024-11-03 00:32:52	active
33	2024-12-12 11:57:23	2025-01-08 11:35:43	active
34	2025-02-09 08:56:47	2025-01-10 04:31:13	active
35	2025-01-19 13:35:00	2025-01-15 04:45:34	pending
36	2025-02-16 20:58:52	2025-02-15 07:07:35	active
37	2025-01-12 09:56:45	2024-11-22 08:16:24	pending
38	2025-01-19 18:46:28	2025-02-04 05:21:40	active
39	2025-01-21 23:11:25	2024-11-22 15:46:52	active
40	2025-02-10 21:55:37	2024-11-01 09:26:43	active
41	2025-01-20 04:19:22	2025-01-16 10:37:29	pending
42	2025-02-19 02:45:18	2025-02-18 12:51:03	active
43	2025-02-03 22:31:54	2025-01-20 14:07:36	inactive
44	2024-12-06 14:46:04	2024-11-10 19:33:02	pending
45	2024-11-22 14:35:36	2025-02-18 19:38:59	active
46	2025-01-25 20:15:02	2025-01-01 10:25:00	active
47	2025-01-14 08:28:03	2024-11-24 16:06:07	active
48	2024-11-06 20:43:09	2025-01-29 08:51:03	pending
49	2024-12-31 15:25:08	2025-01-16 11:46:35	active
50	2024-11-16 04:15:56	2025-02-04 17:08:51	active
56	2024-12-07 00:00:00	2024-12-14 00:00:00	active
57	2024-11-15 00:00:00	2024-11-22 00:00:00	active
58	2024-12-07 00:00:00	2024-12-14 00:00:00	active
59	2024-12-12 00:00:00	2024-12-24 00:00:00	active
61	2024-11-11 00:00:00	2024-11-18 00:00:00	active
62	2024-12-12 00:00:00	2024-12-19 00:00:00	active
63	2024-12-24 00:00:00	2024-12-30 00:00:00	active
64	2026-12-12 00:00:00	2026-12-24 00:00:00	active
65	2025-11-11 00:00:00	2025-11-16 00:00:00	active
\.


--
-- Data for Name: bookings_join_addons; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.bookings_join_addons (addon_fk, booking_fk) FROM stdin;
1	62
1	63
3	65
\.


--
-- Data for Name: bookings_join_customer; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.bookings_join_customer (customer_fk, booking_fk) FROM stdin;
203	62
202	62
204	62
202	63
203	63
204	63
55	63
50	64
10	65
\.


--
-- Data for Name: bookings_join_rooms; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.bookings_join_rooms (rooms_fk, booking_fk) FROM stdin;
213	61
222	61
31	62
33	62
1	1
2	1
3	2
4	3
5	3
6	4
7	5
8	5
9	6
10	7
11	7
12	8
13	9
14	9
15	10
16	11
17	11
18	12
19	13
20	13
21	14
22	15
23	15
24	16
25	17
26	17
27	18
28	19
29	19
30	20
31	21
32	21
33	22
34	23
35	23
36	24
37	25
38	25
39	26
40	27
41	27
42	28
43	29
44	29
45	30
46	31
47	31
48	32
49	33
50	33
16	63
22	63
110	63
151	64
3	65
\.


--
-- Data for Name: customers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.customers (customer_id, name, email, phone_number, birthyear) FROM stdin;
1	Darill Tippett	dtippett0@multiply.com	709-998-0719	1971
2	Marijo Cottell	mcottell1@odnoklassniki.ru	846-252-6226	1940
3	Pincus Jans	pjans2@loc.gov	427-544-7117	1971
4	Richart Linton	rlinton3@cafepress.com	951-994-5129	1945
5	Thom Dummett	tdummett4@usnews.com	413-285-3465	1973
6	Ase Ferenczy	aferenczy5@nbcnews.com	789-715-3932	1948
7	Jennifer McGilleghole	jmcgilleghole6@domainmarket.com	358-618-0426	1975
8	Madelin Merrill	mmerrill7@hubpages.com	259-921-0458	1975
9	Pammi Troy	ptroy8@topsy.com	554-972-7342	1964
10	Martica Stansall	mstansall9@army.mil	893-595-4994	2009
11	Ashley Locks	alocksa@yandex.ru	971-902-5327	1943
12	Lainey Tuffield	ltuffieldb@answers.com	715-462-9647	1973
13	Chandler Tripony	ctriponyc@cbc.ca	915-888-1657	2023
14	Mellie Longworthy	mlongworthyd@ebay.co.uk	997-905-3206	1952
15	Gabey Mathiasen	gmathiasene@ning.com	620-147-6946	2004
16	Mordy Carsberg	mcarsbergf@yahoo.com	301-555-7626	1937
17	Gregor Raccio	gracciog@blinklist.com	715-661-3823	1987
18	Raquel Doctor	rdoctorh@pcworld.com	394-663-0298	1955
19	Alena Dell	adelli@a8.net	449-990-8434	1968
20	Blake Jansema	bjansemaj@amazon.co.jp	691-277-6052	1997
21	Gertrudis Challis	gchallisk@ow.ly	670-636-4230	1942
22	Arri Chittenden	achittendenl@oracle.com	252-100-6539	1955
23	Fonzie Copland	fcoplandm@irs.gov	257-743-7930	1952
24	Lucilia Moiser	lmoisern@cnbc.com	600-461-1542	1941
25	Avigdor Vennart	avennarto@gizmodo.com	426-942-1043	1962
26	Gretchen Bloschke	gbloschkep@w3.org	967-317-5965	1998
27	Shell Raleston	sralestonq@exblog.jp	714-521-2479	2024
28	Kalli Dinjes	kdinjesr@163.com	908-539-4042	1957
29	Cort Whisker	cwhiskers@phoca.cz	133-633-3968	1932
30	Darrelle Seddon	dseddont@irs.gov	282-653-3661	1970
31	Wyatan Tatterton	wtattertonu@people.com.cn	236-344-8833	1934
32	Shirl Brose	sbrosev@domainmarket.com	450-175-3353	1995
33	Jennie Attride	jattridew@scientificamerican.com	437-163-9359	1964
34	Candis Mattys	cmattysx@census.gov	495-370-7713	1965
35	Harcourt Shrigley	hshrigleyy@dropbox.com	787-287-7533	1957
36	Arthur Lilford	alilfordz@bbb.org	447-583-3737	1931
37	Nickie Le Marchant	nle10@bing.com	388-883-7170	1982
38	Alice Louis	alouis11@wufoo.com	589-382-3340	1963
39	Gisella Saile	gsaile12@mapy.cz	177-874-3033	1926
40	Jayne Vairow	jvairow13@blinklist.com	492-690-3647	1927
41	Dimitri Christou	dchristou14@globo.com	862-661-1140	1975
42	Gwenneth Pellissier	gpellissier15@sfgate.com	236-962-6114	1965
43	Shirlene Seale	sseale16@archive.org	288-645-7182	1926
44	Miguela Humm	mhumm17@howstuffworks.com	815-542-6110	1937
45	Halie Lacoste	hlacoste18@foxnews.com	786-887-2879	1942
46	Joey Dolton	jdolton19@hp.com	363-368-6200	1947
47	Kin Hawarden	khawarden1a@ustream.tv	726-674-9113	2006
48	Nissie Vasilchenko	nvasilchenko1b@desdev.cn	153-224-5273	1945
49	Rosanna Brandenberg	rbrandenberg1c@upenn.edu	399-131-3700	1944
50	Stanford Daniellot	sdaniellot1d@wired.com	371-631-8230	1988
51	Ivette Redmire	iredmire1e@theglobeandmail.com	904-856-5661	1942
52	Janice Cocks	jcocks1f@chicagotribune.com	198-984-1958	2007
53	Gwenneth Henrique	ghenrique1g@icio.us	735-481-0842	1997
54	Nolly Guntrip	nguntrip1h@ft.com	267-199-0948	1999
55	Angy Tesauro	atesauro1i@walmart.com	300-623-8255	1968
56	Debora Delves	ddelves1j@wordpress.org	596-727-8532	1945
57	Abey Bagg	abagg1k@eventbrite.com	230-914-2901	1986
58	Earl Vesty	evesty1l@stanford.edu	699-429-1353	1996
59	Theresina Giraldez	tgiraldez1m@epa.gov	878-596-0040	1977
60	Sindee Moden	smoden1n@mtv.com	636-656-3441	1987
61	Raf Borthe	rborthe1o@icq.com	431-645-4836	2015
62	Vernen Paslow	vpaslow1p@privacy.gov.au	741-972-7964	1981
63	Aveline Cookney	acookney1q@com.com	999-300-1506	1934
64	Nolan Macourek	nmacourek1r@bloglovin.com	679-480-5162	1957
65	Wandis Drewry	wdrewry1s@mayoclinic.com	334-491-9084	1948
66	Ivory Kelly	ikelly1t@sina.com.cn	290-132-4399	2000
67	Annalee Lafrentz	alafrentz1u@dmoz.org	578-982-2499	1977
68	Kean Johanning	kjohanning1v@so-net.ne.jp	393-630-0434	2023
69	Jackson Breach	jbreach1w@qq.com	142-545-8660	1994
70	Woody Luciani	wluciani1x@army.mil	250-704-1410	2010
71	Rosette O'Brien	robrien1y@dailymail.co.uk	612-777-8965	1978
72	Jud Walkden	jwalkden1z@blogspot.com	370-982-6428	1961
73	Costanza Souten	csouten20@homestead.com	757-281-2826	1967
74	Devonne Arrol	darrol21@cyberchimps.com	834-570-3079	1939
75	Jilli Barby	jbarby22@e-recht24.de	518-835-6335	2009
76	Base Goodship	bgoodship23@dyndns.org	787-478-2231	1943
77	Ruthi Verry	rverry24@discuz.net	612-732-4184	1959
78	Spence Paige	spaige25@youku.com	858-672-4440	1965
79	Julina Bubear	jbubear26@yelp.com	519-108-5515	1947
80	Erda Benneton	ebenneton27@deliciousdays.com	668-756-3730	2008
81	Mylo Sposito	msposito28@devhub.com	109-472-3651	1992
82	Noemi Malloy	nmalloy29@wikia.com	280-461-3864	1953
83	Erda Greening	egreening2a@free.fr	209-147-6600	1938
84	Steffane Berling	sberling2b@cnbc.com	727-975-2046	2020
85	Lynde Rowat	lrowat2c@cloudflare.com	684-580-4321	1967
86	Fedora Bartolomivis	fbartolomivis2d@comcast.net	777-151-4810	1942
87	Domini Matias	dmatias2e@dedecms.com	559-354-2697	2015
88	Amata Enga	aenga2f@ucla.edu	849-705-4324	1970
89	Reidar Larkcum	rlarkcum2g@bing.com	526-892-0432	1933
90	Bobbee Kiraly	bkiraly2h@linkedin.com	786-622-4328	1936
91	Matias O' Dornan	mo2i@unesco.org	830-732-7938	2020
92	Etta Escudier	eescudier2j@cbc.ca	933-792-6714	2013
93	Ingunna O'Nolan	ionolan2k@dell.com	606-944-0530	1986
94	Nataline Estcourt	nestcourt2l@so-net.ne.jp	669-930-7736	1990
95	Sharla Thomasen	sthomasen2m@virginia.edu	302-287-1368	1988
96	Adelaida Youhill	ayouhill2n@unc.edu	323-632-7063	2019
97	Ondrea Paolo	opaolo2o@mail.ru	695-864-9716	1991
98	Felipa Winks	fwinks2p@mlb.com	205-516-0737	1960
99	Cassi Geale	cgeale2q@drupal.org	558-748-3283	1978
100	Ciro Roscamps	croscamps2r@symantec.com	790-601-3833	1976
101	Donavon Rookeby	drookeby2s@geocities.com	352-537-3953	1996
102	Rollin Frances	rfrances2t@bravesites.com	815-457-8294	1971
103	Christye Klesl	cklesl2u@google.ca	153-376-6367	1926
104	Benoit Nano	bnano2v@posterous.com	522-951-5392	1990
105	Camila Bazelle	cbazelle2w@cmu.edu	315-567-0039	2004
106	Raviv Kelmere	rkelmere2x@narod.ru	231-315-0797	2006
107	Jerrold Danett	jdanett2y@bizjournals.com	898-260-0104	1940
108	Derron Stolting	dstolting2z@phpbb.com	663-594-7373	1942
109	Francklin Bondesen	fbondesen30@bizjournals.com	926-795-7414	1986
110	Annetta Boor	aboor31@independent.co.uk	885-159-1516	1987
111	Alden Lortz	alortz32@csmonitor.com	773-776-5550	2010
112	Efren Kilborn	ekilborn33@youku.com	878-730-1271	1929
113	Ozzie O'Hannigan	oohannigan34@zdnet.com	730-462-6827	1934
114	Benedicto Vernalls	bvernalls35@alibaba.com	243-118-7056	2003
115	Romeo Blatherwick	rblatherwick36@washington.edu	487-609-8544	1999
116	Em L'oiseau	eloiseau37@skype.com	689-663-1431	1978
117	Nissa Gyurko	ngyurko38@sciencedaily.com	280-608-9497	1929
118	Dorie Fossick	dfossick39@narod.ru	215-947-8274	2010
119	Jaclin Vears	jvears3a@skyrock.com	541-606-0538	2021
120	Cullan Beddis	cbeddis3b@fda.gov	360-729-9466	1981
121	Karoline Matis	kmatis3c@blogger.com	105-417-6407	1973
122	Curt Hegden	chegden3d@mediafire.com	369-738-7260	1947
123	Lavena Dyster	ldyster3e@jugem.jp	815-129-5950	1972
124	Kaylyn Hallybone	khallybone3f@sbwire.com	938-938-6443	1945
125	Even Pickles	epickles3g@uiuc.edu	637-815-4701	1936
126	Randi Gammell	rgammell3h@ucsd.edu	444-149-8968	1927
127	Kelcy Boldecke	kboldecke3i@usnews.com	959-296-8030	1933
128	Justina Gagin	jgagin3j@abc.net.au	202-222-3288	1979
129	Kinnie Jewers	kjewers3k@hostgator.com	947-692-9783	2020
130	Jarrett Brizell	jbrizell3l@barnesandnoble.com	878-282-6070	2015
131	Maible Backe	mbacke3m@chronoengine.com	435-943-3869	1967
132	Anabel Eagling	aeagling3n@ca.gov	464-783-5915	2022
133	Jakob Eliassen	jeliassen3o@census.gov	232-419-2214	1992
134	Nance MacIan	nmacian3p@360.cn	289-400-6382	1946
135	Danette Sarra	dsarra3q@tripod.com	732-692-4116	1975
136	Doti Berends	dberends3r@chron.com	189-157-6196	1958
137	Somerset McMarquis	smcmarquis3s@gravatar.com	271-241-4832	1959
138	Mel Neeve	mneeve3t@state.gov	889-320-4861	1956
139	Rosabelle Piggens	rpiggens3u@desdev.cn	567-877-0615	1996
140	Annabel Halpen	ahalpen3v@ifeng.com	312-952-6868	1931
141	Raye Gonneau	rgonneau3w@taobao.com	292-183-8168	1984
142	Joell Matelaitis	jmatelaitis3x@statcounter.com	165-217-6124	2017
143	Isabella Melloi	imelloi3y@mashable.com	809-552-7903	1988
144	Guglielmo Klimentov	gklimentov3z@fema.gov	100-391-5884	2016
145	Reina Batt	rbatt40@drupal.org	993-767-7013	1931
146	Penny Bembrick	pbembrick41@123-reg.co.uk	820-877-9610	1985
147	Suzann Jecock	sjecock42@google.co.uk	891-592-4390	1962
148	Prudi Piercy	ppiercy43@cbc.ca	905-848-7487	1948
149	Ralina Slay	rslay44@independent.co.uk	157-404-1190	2004
150	Leshia Eger	leger45@skype.com	225-729-2336	1949
151	Fianna Bixley	fbixley46@godaddy.com	356-666-1172	1999
152	Jarrad Zmitruk	jzmitruk47@who.int	224-162-2242	2021
153	Markus Jewkes	mjewkes48@statcounter.com	364-236-6886	2003
154	Win Ronaldson	wronaldson49@storify.com	359-736-9661	1994
155	Megen Ambrosio	mambrosio4a@fda.gov	340-107-0677	2019
156	Sidonia Petett	spetett4b@youtube.com	492-764-5372	2020
157	Audrye Laingmaid	alaingmaid4c@marketwatch.com	529-762-7281	2024
158	Raymund Batham	rbatham4d@liveinternet.ru	307-562-7197	1928
159	Margeaux Reyna	mreyna4e@slate.com	519-428-6044	1943
160	Lotta Willan	lwillan4f@statcounter.com	374-405-2460	1983
161	Damaris Huggill	dhuggill4g@smh.com.au	834-905-2851	1992
162	Cami Stennings	cstennings4h@engadget.com	682-335-7067	1979
163	Stefan Fannin	sfannin4i@twitter.com	148-252-1256	1991
164	Vickie Zisneros	vzisneros4j@pbs.org	137-158-2568	1971
165	Giusto Dobsons	gdobsons4k@tinyurl.com	851-365-1182	2006
166	Dennie Abbie	dabbie4l@mail.ru	512-137-2033	1976
167	Alysa Duffree	aduffree4m@upenn.edu	641-357-3167	1983
168	Laura Sparham	lsparham4n@techcrunch.com	203-406-5455	1990
169	Al Driver	adriver4o@harvard.edu	864-260-7465	1928
170	Clarita Arrighini	carrighini4p@g.co	269-842-8928	1999
171	Emalee Wiszniewski	ewiszniewski4q@microsoft.com	346-644-0480	1956
172	Breena Obispo	bobispo4r@seattletimes.com	515-230-3585	1967
173	Tish Ruddick	truddick4s@photobucket.com	639-153-7260	1961
174	Gretna Dwane	gdwane4t@cam.ac.uk	382-644-2038	1936
175	Denna Cescotti	dcescotti4u@bizjournals.com	219-781-1900	1928
176	Janek Rampage	jrampage4v@cam.ac.uk	842-839-4621	1932
177	Adele Chittim	achittim4w@princeton.edu	229-160-4570	2002
178	Genvieve Elmes	gelmes4x@edublogs.org	110-822-3372	1980
179	Erika Threlfall	ethrelfall4y@geocities.jp	555-525-3166	1978
180	Maxim Petrillo	mpetrillo4z@amazon.co.jp	646-180-8756	1981
181	Frazer Dearsley	fdearsley50@jimdo.com	950-450-0726	1933
182	Jewel Bell	jbell51@phpbb.com	950-125-0392	1949
183	Rhoda Winny	rwinny52@feedburner.com	298-277-1073	1987
184	Nico Alelsandrovich	nalelsandrovich53@reverbnation.com	776-178-3542	2012
185	Margaret Kemson	mkemson54@godaddy.com	625-571-0401	1929
186	Findlay Lipsett	flipsett55@merriam-webster.com	659-291-4827	1949
187	Merilyn Willgoose	mwillgoose56@free.fr	969-854-5658	1956
188	Johan Pelfer	jpelfer57@amazon.co.uk	458-998-2387	1929
189	Niles Quaif	nquaif58@topsy.com	489-877-6795	1964
190	Rubi Lammenga	rlammenga59@hostgator.com	186-983-8360	1968
191	Gunilla Redmille	gredmille5a@multiply.com	599-260-7837	1982
192	Reina Webborn	rwebborn5b@123-reg.co.uk	236-531-9207	1927
193	Elna Demsey	edemsey5c@bigcartel.com	976-814-5340	1951
194	Remus Pestridge	rpestridge5d@imdb.com	965-984-6499	1994
195	Winnie Adhams	wadhams5e@google.pl	815-833-4639	1971
196	Torrey Wurst	twurst5f@wordpress.org	264-617-2050	1959
197	Forrest Forker	fforker5g@opera.com	103-708-9769	1932
198	Dasya Lodin	dlodin5h@abc.net.au	439-471-9986	1971
199	Mortimer Lathwell	mlathwell5i@jugem.jp	689-582-9119	1957
200	Donny Wraight	dwraight5j@vistaprint.com	480-423-9211	1968
202	kasper	kasper@gmale.com	66666666666666	1265
203	damien	damien@deez.nuts	45687489545	1888
204	david	davidmaguy@gmail.com	699699669696	1
\.


--
-- Data for Name: hotel_features; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.hotel_features (hotel_features_id, feature) FROM stdin;
1	pool
2	evening entertainment
3	kidclub
4	resturant
\.


--
-- Data for Name: hotels; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.hotels (hotel_id, street_name, postal_code, city, region, country, distance_to_ski_slope, distance_to_town_center, rating) FROM stdin;
1	4 Warrior Plaza	\N	Asquipata	\N	Peru	17.1	6.8	1
2	36 Bultman Park	05516	Alor Setar	KDH	Malaysia	6.9	3.4	4
3	53 Wayridge Road	\N	Ilare	\N	Nigeria	6.5	3.1	3
4	06 Shelley Plaza	\N	Ô Môn	\N	Vietnam	17.5	6.2	5
5	57 Di Loreto Lane	\N	Xinzhai	\N	China	16.5	1.6	4
6	5979 Oxford Road	\N	Adrasmon	\N	Tajikistan	11.7	1.4	3
7	47 Nevada Place	\N	Kotadukuh	\N	Indonesia	7.1	9.6	2
8	752 Glendale Road	\N	Sidoaji	\N	Indonesia	16.8	1.4	2
9	5 Rigney Court	\N	Xiayang	\N	China	9.1	2.9	4
10	6 Novick Alley	93209 CEDEX	Saint-Denis	A8	France	5.6	5.2	2
11	25 Utah Court	\N	Berlín	\N	El Salvador	13.5	4.6	3
12	25502 Becker Lane	871 33	Härnösand	Y	Sweden	3.5	3.1	4
13	2 Pennsylvania Avenue	\N	Wanzhi	\N	China	5.7	8.3	3
14	33 Fair Oaks Street	452778	Tuymazy	\N	Russia	4.2	7.1	1
15	7859 Grasskamp Point	\N	Somorpenang	\N	Indonesia	1.1	2.8	4
16	727 Raven Trail	\N	Bella Vista	\N	Panama	2.0	2.9	4
17	44400 Harbort Street	7104	Rizal	\N	Philippines	3.6	4.6	4
18	56 Claremont Trail	15001	Salamá	\N	Guatemala	17.0	1.2	3
19	718 Barnett Junction	52140	San Pedro	MEX	Mexico	7.1	5.8	1
20	0 Dovetail Place	684517	Barbosa	\N	Colombia	4.2	2.2	1
21	3179 Esch Lane	72204	Little Rock	AR	United States	11.2	2.2	4
22	10014 Rieder Road	\N	San Miguel del Padrón	\N	Cuba	12.8	1.8	1
23	76458 Hanson Circle	\N	Reshetylivka	\N	Ukraine	7.6	3.2	5
24	09 Hovde Avenue	38-114	Niebylec	\N	Poland	11.6	7.4	2
25	1910 Northport Way	\N	Liancheng	\N	China	14.1	9.6	2
\.


--
-- Data for Name: hotels_join_features; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.hotels_join_features (feature_fk, hotel_fk) FROM stdin;
1	1
2	1
3	1
2	2
4	2
1	3
3	3
1	4
2	4
4	4
2	5
3	5
1	6
2	6
4	6
3	7
4	7
1	8
2	8
2	9
3	9
4	9
1	10
3	10
2	11
3	11
1	12
4	12
3	13
4	13
1	14
2	14
1	15
3	15
2	16
3	16
4	16
1	17
4	17
1	18
2	18
4	18
2	19
3	19
1	20
3	20
2	21
4	21
1	22
3	22
4	22
1	23
2	23
3	24
4	24
1	25
2	25
4	25
\.


--
-- Data for Name: rooms; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.rooms (room_id, size, price, hotel_fk, room_number) FROM stdin;
1	1 bed	3856	15	29
2	2 beds	3553	2	30
3	3 beds	3547	25	7
4	2 beds	1386	7	7
5	3 beds	2449	11	39
6	3 beds	696	1	34
7	1 bed	1769	1	34
8	2 beds	4132	16	10
9	3 beds	2356	22	11
10	2 beds	3976	25	21
11	3 beds	1564	23	2
12	2 beds	3447	21	8
13	2 beds	1797	8	18
14	1 bed	3636	4	18
15	1 bed	853	6	18
16	3 beds	3740	12	28
17	1 bed	3455	23	36
18	2 beds	959	19	21
19	3 beds	4300	23	25
20	1 bed	2042	8	22
21	3 beds	1163	19	6
22	1 bed	1750	9	39
23	1 bed	2422	9	37
24	3 beds	1743	3	35
25	1 bed	2108	20	25
26	1 bed	506	20	2
27	3 beds	3801	11	17
28	2 beds	3811	8	18
29	2 beds	4262	4	37
30	2 beds	4458	20	17
31	2 beds	4349	1	23
32	1 bed	2473	5	35
33	1 bed	1256	1	9
34	1 bed	1266	12	26
35	2 beds	3657	16	29
36	3 beds	2602	16	11
37	3 beds	2659	9	9
38	3 beds	1911	3	10
39	3 beds	2208	14	18
40	2 beds	2603	2	3
41	3 beds	508	7	19
42	2 beds	2571	22	10
43	2 beds	4469	24	40
44	2 beds	983	12	35
45	1 bed	555	19	28
46	2 beds	2963	1	24
47	3 beds	4364	22	39
48	1 bed	1999	23	27
49	3 beds	2227	7	38
50	2 beds	4296	1	9
51	3 beds	2649	15	19
52	2 beds	1759	4	13
53	1 bed	3282	24	13
54	2 beds	935	5	36
55	2 beds	1499	21	28
56	2 beds	1414	3	23
57	2 beds	3046	7	28
58	2 beds	2477	20	2
59	2 beds	1042	9	30
60	3 beds	1147	19	40
61	1 bed	563	5	36
62	3 beds	3944	19	9
63	1 bed	1899	8	21
64	1 bed	1256	1	28
65	3 beds	3876	10	1
66	3 beds	3237	4	36
67	2 beds	3010	2	36
68	2 beds	2404	3	32
69	3 beds	1708	22	7
70	1 bed	4247	17	40
71	1 bed	1611	17	31
72	2 beds	3805	16	19
73	1 bed	3865	19	22
74	1 bed	4471	4	23
75	1 bed	4230	8	11
76	1 bed	3943	15	7
77	1 bed	4024	6	5
78	3 beds	1047	3	13
79	2 beds	3252	18	2
80	1 bed	2512	4	6
81	3 beds	4137	6	6
82	2 beds	1278	23	38
83	1 bed	1464	25	14
84	3 beds	2312	2	10
85	2 beds	2429	16	20
86	1 bed	682	9	6
87	3 beds	808	17	5
88	1 bed	1175	10	7
89	1 bed	2987	4	3
90	1 bed	1948	3	33
91	1 bed	3615	8	29
92	3 beds	1184	20	6
93	3 beds	1208	11	24
94	2 beds	3639	22	1
95	1 bed	2592	17	5
96	1 bed	2204	2	31
97	1 bed	1111	10	4
98	1 bed	2122	8	32
99	2 beds	1569	14	40
100	2 beds	3285	14	19
101	3 beds	2993	18	33
102	3 beds	1451	8	6
103	1 bed	2472	2	32
104	1 bed	2273	20	2
105	2 beds	987	13	14
106	3 beds	833	13	24
107	1 bed	3927	10	20
108	3 beds	2293	23	34
109	3 beds	2347	15	7
110	3 beds	1376	12	1
111	2 beds	3611	10	26
112	1 bed	2465	12	1
113	1 bed	2072	15	26
114	3 beds	1500	2	17
115	2 beds	617	18	9
116	2 beds	4209	1	14
117	2 beds	1055	1	37
118	3 beds	719	3	4
119	1 bed	1489	20	15
120	1 bed	3010	17	18
121	1 bed	734	24	40
122	3 beds	4448	22	8
123	3 beds	1824	8	10
124	3 beds	4180	7	38
125	1 bed	1036	3	39
126	1 bed	4056	9	3
127	2 beds	1259	12	25
128	1 bed	2381	22	14
129	2 beds	4022	7	14
130	2 beds	732	13	23
131	1 bed	787	12	13
132	2 beds	3555	5	3
133	2 beds	2319	23	11
134	2 beds	1077	14	5
135	1 bed	2567	24	2
136	3 beds	4073	25	15
137	2 beds	1081	7	30
138	2 beds	3420	8	29
139	1 bed	2500	19	19
140	3 beds	785	4	40
141	3 beds	1414	22	38
142	1 bed	3042	20	37
143	2 beds	2872	11	5
144	2 beds	1698	23	31
145	3 beds	3909	20	39
146	1 bed	1338	23	31
147	3 beds	2176	16	14
148	3 beds	2173	24	29
149	1 bed	3358	4	7
150	3 beds	2377	5	10
151	1 bed	1705	22	21
152	3 beds	3478	12	25
153	2 beds	3971	11	5
154	2 beds	3071	5	31
155	1 bed	3511	1	33
156	1 bed	1413	9	38
157	1 bed	4295	5	3
158	2 beds	2626	3	4
159	3 beds	3575	20	39
160	3 beds	3279	22	10
161	3 beds	2508	11	37
162	2 beds	2283	19	31
163	3 beds	1004	13	5
164	1 bed	4272	7	13
165	2 beds	3528	17	4
166	3 beds	784	20	25
167	2 beds	771	14	11
168	3 beds	1453	19	18
169	1 bed	1660	13	32
170	1 bed	1223	24	6
171	3 beds	1423	6	36
172	3 beds	1298	3	40
173	1 bed	3579	10	2
174	3 beds	2030	25	15
175	2 beds	1700	12	1
176	2 beds	1462	3	12
177	1 bed	802	6	15
178	1 bed	1484	12	34
179	1 bed	1136	5	33
180	2 beds	2084	4	27
181	2 beds	3505	17	20
182	1 bed	2281	20	25
183	1 bed	2455	25	22
184	1 bed	3335	19	34
185	3 beds	1665	24	21
186	2 beds	1790	3	14
187	3 beds	4004	8	18
188	3 beds	1463	24	18
189	3 beds	4337	25	33
190	1 bed	2740	20	1
191	3 beds	2938	7	19
192	2 beds	983	15	34
193	3 beds	2693	1	21
194	1 bed	2708	6	7
195	3 beds	4162	8	16
196	3 beds	1021	13	31
197	1 bed	4303	3	30
198	3 beds	4491	17	28
199	1 bed	2017	3	16
200	3 beds	1179	21	33
201	3 beds	1633	15	32
202	1 bed	630	7	33
203	3 beds	1013	1	38
204	2 beds	3455	24	27
205	1 bed	1559	8	23
206	2 beds	2551	4	35
207	1 bed	4495	23	38
208	1 bed	2479	3	7
209	3 beds	3303	25	25
210	2 beds	3888	8	15
211	3 beds	1049	10	24
212	1 bed	583	25	3
213	2 beds	3783	12	38
214	1 bed	2552	25	17
215	3 beds	1317	23	28
216	2 beds	2063	3	40
217	2 beds	1833	2	38
218	2 beds	2122	18	20
219	1 bed	1274	11	2
220	2 beds	583	16	9
221	1 bed	3607	14	27
222	3 beds	2819	12	11
223	1 bed	661	22	4
224	1 bed	4217	19	13
225	3 beds	3909	17	9
226	1 bed	1846	10	21
227	1 bed	3227	2	32
228	3 beds	1868	15	28
229	2 beds	1324	7	17
230	1 bed	3841	19	26
231	2 beds	3220	22	12
232	2 beds	3624	8	34
233	3 beds	3964	14	29
234	2 beds	2652	24	27
235	1 bed	2830	14	40
236	2 beds	2188	16	3
237	2 beds	1623	3	37
238	2 beds	774	3	3
239	1 bed	1198	16	7
240	2 beds	3050	6	9
241	1 bed	1064	16	8
242	1 bed	1552	6	40
243	2 beds	3615	13	27
244	3 beds	4253	18	13
245	1 bed	4479	18	29
246	2 beds	614	11	7
247	2 beds	1199	1	1
248	3 beds	972	12	19
249	2 beds	3912	6	38
250	1 bed	3511	17	36
\.


--
-- Name: addons_addons_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.addons_addons_id_seq', 4, true);


--
-- Name: admins_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.admins_id_seq', 2, true);


--
-- Name: bookings_bookings_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.bookings_bookings_id_seq', 65, true);


--
-- Name: customers_customer_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.customers_customer_id_seq', 204, true);


--
-- Name: hotel_features_hotel_features_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.hotel_features_hotel_features_id_seq', 4, true);


--
-- Name: hotels_address_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.hotels_address_id_seq', 25, true);


--
-- Name: rooms_room_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.rooms_room_id_seq', 250, true);


--
-- Name: addons addons_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.addons
    ADD CONSTRAINT addons_pk PRIMARY KEY (addons_id);


--
-- Name: bookings_join_addons bookings_join_addons_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bookings_join_addons
    ADD CONSTRAINT bookings_join_addons_pk PRIMARY KEY (addon_fk, booking_fk);


--
-- Name: bookings_join_customer bookings_join_customer_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bookings_join_customer
    ADD CONSTRAINT bookings_join_customer_pk PRIMARY KEY (booking_fk, customer_fk);


--
-- Name: bookings_join_rooms bookings_join_rooms_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bookings_join_rooms
    ADD CONSTRAINT bookings_join_rooms_pk PRIMARY KEY (booking_fk, rooms_fk);


--
-- Name: bookings bookings_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bookings
    ADD CONSTRAINT bookings_pk PRIMARY KEY (bookings_id);


--
-- Name: customers customers_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.customers
    ADD CONSTRAINT customers_pk PRIMARY KEY (customer_id);


--
-- Name: hotel_features hotel_features_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.hotel_features
    ADD CONSTRAINT hotel_features_pk PRIMARY KEY (hotel_features_id);


--
-- Name: hotels_join_features hotels_join_features_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.hotels_join_features
    ADD CONSTRAINT hotels_join_features_pk PRIMARY KEY (feature_fk, hotel_fk);


--
-- Name: hotels hotels_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.hotels
    ADD CONSTRAINT hotels_pk PRIMARY KEY (hotel_id);


--
-- Name: rooms rooms_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rooms
    ADD CONSTRAINT rooms_pk PRIMARY KEY (room_id);


--
-- Name: addons addons_hotels_hotel_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.addons
    ADD CONSTRAINT addons_hotels_hotel_id_fk FOREIGN KEY (hotel_fk) REFERENCES public.hotels(hotel_id);


--
-- Name: bookings_join_addons bookings_join_addons_addons_addons_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bookings_join_addons
    ADD CONSTRAINT bookings_join_addons_addons_addons_id_fk FOREIGN KEY (addon_fk) REFERENCES public.addons(addons_id);


--
-- Name: bookings_join_addons bookings_join_addons_bookings_bookings_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bookings_join_addons
    ADD CONSTRAINT bookings_join_addons_bookings_bookings_id_fk FOREIGN KEY (booking_fk) REFERENCES public.bookings(bookings_id);


--
-- Name: bookings_join_customer bookings_join_customer_bookings_bookings_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bookings_join_customer
    ADD CONSTRAINT bookings_join_customer_bookings_bookings_id_fk FOREIGN KEY (booking_fk) REFERENCES public.bookings(bookings_id);


--
-- Name: bookings_join_customer bookings_join_customer_customers_customer_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bookings_join_customer
    ADD CONSTRAINT bookings_join_customer_customers_customer_id_fk FOREIGN KEY (customer_fk) REFERENCES public.customers(customer_id);


--
-- Name: bookings_join_rooms bookings_join_rooms_bookings_bookings_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bookings_join_rooms
    ADD CONSTRAINT bookings_join_rooms_bookings_bookings_id_fk FOREIGN KEY (booking_fk) REFERENCES public.bookings(bookings_id);


--
-- Name: bookings_join_rooms bookings_join_rooms_rooms_room_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bookings_join_rooms
    ADD CONSTRAINT bookings_join_rooms_rooms_room_id_fk FOREIGN KEY (rooms_fk) REFERENCES public.rooms(room_id);


--
-- Name: hotels_join_features hotels_join_features_hotel_features_hotel_features_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.hotels_join_features
    ADD CONSTRAINT hotels_join_features_hotel_features_hotel_features_id_fk FOREIGN KEY (feature_fk) REFERENCES public.hotel_features(hotel_features_id);


--
-- Name: hotels_join_features hotels_join_features_hotels_hotel_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.hotels_join_features
    ADD CONSTRAINT hotels_join_features_hotels_hotel_id_fk FOREIGN KEY (hotel_fk) REFERENCES public.hotels(hotel_id);


--
-- Name: rooms rooms_hotels_hotel_id_fk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rooms
    ADD CONSTRAINT rooms_hotels_hotel_id_fk FOREIGN KEY (hotel_fk) REFERENCES public.hotels(hotel_id);


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE USAGE ON SCHEMA public FROM PUBLIC;


--
-- PostgreSQL database dump complete
--

